 PROGRAM 1:  C program to find the sum of 'n' numbers.

Roll_No : 37
NAME : NAFEESA K T



SOURCE CODE :


#include<stdio.h>

int main()
{
	int arr[10],sum=0,n,i,j;
	printf("Enter the elements : ");
	scanf("%d",&n);
	for(i=0;i<=n-1;i++)
	{
		scanf("%d",&arr[i]);
	}
	for(j=0;j<=n-1;j++)
	{
		sum=sum+arr[j];
	}
	printf("sum = %d",sum);
	return 0;
}

------------------------------------------------------------------------------------

PROGRAM 2 : C program to merge two sorted arrays.

Roll_No : 37
NAME : NAFEESA K T


SOURCE CODE :

#include<stdio.h>
int main()
{
	int n,m,p,i,j,temp;            
	int a[100], b[100], c[200];
	printf("\nEnter the size of first array:\n");
	scanf("%d",&n);
	printf("\nEnter the array elements:\n");
	for( i = 0; i < n; i++)
	{
		scanf("%d", &a[i]);
	}
	printf("\nEnter the first sorted array:\n ");
		for( i = 0; i < n; i++)
		{

			for( j = i + 1; j < n; j++) 
			{
				if(c[i] > c[j]) 
					{
						temp = c[i];
						c[i] = c[j];
						c[j] = temp;
				}
			}
		}   
	for( i = 0; i < n; i++)   
	{  
		printf("%d",a[i]);
	}
	printf("\nEnter the size of second array:\n ");
	scanf("%d",&m);
	printf("\nEnter the array elements:\n");
	for( i = 0; i < m; i++)   
	{   
		scanf("%d", &b[i]);
	}
	printf("\nEnter the second sorted array:\n ");
		for( i = 0; i < m; i++)
		{

			for( j = i + 1; j < m; j++) 
			{
				if(c[i] > c[j]) 
					{
						temp = c[i];
						c[i] = c[j];
						c[j] = temp;
				}
			}
		}   
	for( i = 0; i < m; i++)   
	{  
		printf("%d",b[i]);
	}
	p = n + m;
	for( i = 0; i < n; i++)
	{
		c[i] = a[i];
	}	
	for( i = 0; i < m; i++) 
	{    
		c[i + n] = b[i];
	}
        
	printf("\nThe merged array:\n");
	for( i = 0; i < p; i++)
		printf("%d ", c[i]);        
    
	printf("\nSorted Array:\n");
		for( i = 0; i < p; i++)
		{

			for( j = i + 1; j < p; j++) 
			{
				if(c[i] > c[j]) 
					{
						temp = c[i];
						c[i] = c[j];
						c[j] = temp;
				}
			}
		}   
	for( i = 0; i < p ; i++)       
		printf(" %d ",c[i]);
return 0;   
}

------------------------------------------------------------------------------------------------------------------------

PROGRAM 3 : C program to create a STACK using array data structure and implement the operations PUSH, POP and TRAVESE.

Roll_No : 37
NAME : NAFEESA K T


SOURCE CODE :

#include<stdio.h>
#include <stdlib.h>  
#define SIZE 10

int top = -1,arr[SIZE];  
void push();  
void pop();  
void traversal();  

int main()

{
	 int ch;  
	while (1)
	{  
		printf("\nPerform operations on the stack:");  
		printf("\n1.Push\n2.Pop\n3.Traversal\n4.End");  
		printf("\n\nEnter the choice: ");  
		scanf("%d", &ch);  
		switch(ch)
		{
			case 1:
				push();
				break;
			case 2:
				pop();
				break;
			case 3:
				traversal();
				break;
			case 4:
				return(0);
			default:
			printf("\n\nWrong choice entered");
		}
	}
}

void push()  
{  
	int n; 
	if (top == SIZE - 1)  
	{  
		printf("\nOverflow!!");  
	}  
	else  
	{  
		printf("\nEnter the element to be added onto the stack: ");  
		scanf("%d", &n);  
		top = top + 1;  
		arr[top] = n;  
	}  
}
  
void pop()  
{  
	if (top == -1)  
	{  
		printf("\nUnderflow!!");  
	}  
	else  
	{	  
		printf("\nPopped element: %d",arr[top]);  
		top = top - 1;  
	}  
}  

void traversal()  
{  
	if (top == -1)  
	{  
		printf("\nUnderflow!!");  
	}  
	else  
	{  
		printf("\nElements in the stack: \n");  
		for (int i = top; i >= 0; --i)  
		printf("%d\n",arr[i]);  
	}  
}  

--------------------------------------------------------------------------------------------------------------------------------

PROGRAM 4 : C program to create a QUEUE using array data structure and implement the operations ENQUEUE, DEQUEUE and TRAVERSE.

Roll_No : 37
NAME : NAFEESA K T

SOURCE CODE :

#include<stdio.h>
#include<stdlib.h>  
#define maxsize 5
  
void enqueue();
void dequeue();
void traversal();

int FRONT = -1,REAR = -1;  
int queue[maxsize];  

int main()

{
	int ch;   
	while(ch != 4)   
	{
		printf("\n1.Enqueue an element  \n2.Dequeue an element  \n3.traversal the elements  \n4.Exit  \n");
		printf("\n Enter your choice : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:		
			enqueue();
			break;
			
			case 2:
			dequeue();
			break;

			case 3:
			traversal();
			break;

			case 4:
			exit(0);
			break;

			default:
	
			printf("enter a valid choice");
		}
	}
}

void enqueue()
{
	int ITEM;
	printf("\nEnter the element : \n");
	scanf("%d",&ITEM);
	if (REAR == maxsize-1)
	{
		printf("\n Overflow \n");
		return;
	}
	if (FRONT == -1 && REAR == -1)
	{
		FRONT = REAR = 0;
	}
	else
	{
		REAR = REAR + 1;
	}
	queue[REAR] = ITEM;
	printf("\n element inserted\n");
}

void dequeue()
{
	int ITEM;
	if (FRONT ==-1)
	{
	printf("\n UNDERFLOW\n");
	return;	
	}
	else
	{
	ITEM = queue[FRONT];
	if (FRONT == REAR)
	{
		FRONT = -1;
		REAR = -1;
	}
	else
	{
		FRONT = FRONT + 1;
	}
	printf("\n element deleted\n");
	}
}

void traversal()
{
	int i;
	if (REAR == -1)
	{
		printf("\n Queue is empty \n");
	}
	else
	{
		for(i = FRONT ; i <= REAR ; i++)
		{
			printf("\n %d\n",queue[i]);
		}
	}
}

